"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const utils_1 = require("../utils");
async function generate(config) {
    const { idlDir, idlName, binaryInstallDir, programDir, programName, binaryExtraArgs, } = config;
    const binaryArgs = [
        'idl',
        '--out-dir',
        idlDir,
        '--crate-root',
        programDir,
        ...(idlName ? ['--out-filename', `${idlName}.json`] : []),
        ...(binaryExtraArgs !== null && binaryExtraArgs !== void 0 ? binaryExtraArgs : []),
    ];
    const binaryOptions = { cwd: programDir };
    const rustbinConfig = {
        rootDir: binaryInstallDir,
        binaryName: 'shank',
        binaryCrateName: 'shank-cli',
        libName: 'shank',
        cargoToml: path_1.default.join(programDir, 'Cargo.toml'),
        dryRun: false,
        ...config.rustbin,
    };
    const { fullPathToBinary, binVersion, libVersion } = await (0, utils_1.checkAndInstallRustBinary)(rustbinConfig);
    const exitCode = await (0, utils_1.executeBinary)(fullPathToBinary, binaryArgs, binaryOptions);
    if (exitCode !== 0) {
        throw new Error(`${programName} idl generation failed`);
    }
    const idl = (0, utils_1.consumeIdl)(path_1.default.join(idlDir, `${idlName !== null && idlName !== void 0 ? idlName : programName}.json`));
    idl.metadata = {
        ...idl.metadata,
        origin: config.generator,
        binaryVersion: binVersion,
        libVersion,
    };
    return idl;
}
exports.default = generate;
//# sourceMappingURL=shank.js.map