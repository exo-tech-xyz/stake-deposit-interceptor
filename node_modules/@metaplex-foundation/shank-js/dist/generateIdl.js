"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateIdl = void 0;
const fs_1 = require("fs");
const anchor_1 = __importDefault(require("./generators/anchor"));
const shank_1 = __importDefault(require("./generators/shank"));
const utils_1 = require("./utils");
async function generateIdl(config) {
    removeCurrentIdl(config);
    const idl = await handleGenerator(config);
    const enhancedIdl = enhanceIdl(config, idl);
    writeIdl(config, enhancedIdl);
}
exports.generateIdl = generateIdl;
function removeCurrentIdl(config) {
    if (config.removeExistingIdl === false)
        return;
    const idlPath = (0, utils_1.getIdlPath)(config);
    if (!(0, fs_1.existsSync)(idlPath))
        return;
    try {
        (0, fs_1.rmSync)(idlPath);
        (0, utils_1.logInfo)(`Removed existing IDL at ${idlPath}.`);
    }
    catch (error) {
        (0, utils_1.logWarn)(`Failed to remove existing IDL at ${idlPath}.`);
    }
}
async function handleGenerator(config) {
    if (config.generator === 'anchor') {
        return (0, anchor_1.default)(config);
    }
    if (config.generator === 'shank') {
        return (0, shank_1.default)(config);
    }
    // @ts-ignore
    throw new Error(`Unrecognized IDL generator: ${config.generator}`);
}
function enhanceIdl(config, idl) {
    return config.idlHook ? config.idlHook(idl) : idl;
}
function writeIdl(config, idl) {
    const idlPath = (0, utils_1.getIdlPath)(config);
    (0, fs_1.writeFileSync)(idlPath, JSON.stringify(idl, null, 2));
}
//# sourceMappingURL=generateIdl.js.map