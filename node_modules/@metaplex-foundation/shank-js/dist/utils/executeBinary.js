"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeBinary = void 0;
const ansi_colors_1 = require("ansi-colors");
const child_process_1 = require("child_process");
const path_1 = __importDefault(require("path"));
const logs_1 = require("./logs");
function executeBinary(binary, args, options) {
    return new Promise((resolve, reject) => {
        const tool = path_1.default.basename(binary);
        const childProcess = (0, child_process_1.spawn)(binary, args, options)
            .on('error', (err) => {
            (0, logs_1.logError)(`Failed to execute: ${tool} ${args}`);
            reject(err);
        })
            .on('exit', async (code) => {
            const exitCode = code !== null && code !== void 0 ? code : 0;
            if (exitCode !== 0)
                (0, logs_1.logError)(`Failed to execute: ${tool} ${args}`);
            resolve(exitCode);
        });
        childProcess.stdout.on('data', (buf) => process.stdout.write(buf));
        childProcess.stderr.on('data', (buf) => {
            const dataStr = buf.toString();
            if (/^Error:/.test(dataStr)) {
                (0, logs_1.logError)((0, ansi_colors_1.red)(dataStr));
            }
            else {
                process.stderr.write(buf);
            }
        });
    });
}
exports.executeBinary = executeBinary;
//# sourceMappingURL=executeBinary.js.map